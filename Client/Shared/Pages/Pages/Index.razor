@page "/"
@using Bell.Reconciliation.Frontend.Shared.Pages.Shared
@using Bell.Reconciliation.Frontend.Shared.Pages.Shared.Header

@inject ILocalDbRepository _localdb
@inject IStateContainer StateContainer
@*@attribute [Authorize]*@

<RadzenDialog></RadzenDialog>

<Header ShowSyncChanges="@localDbExist" RunLoadDatabaseInUi="(e)=>LoadDatabaseInUi(new FilterItemDto())" FetchButtonClicked="(e)=>FetchButtonClickedChange(e)"></Header>




<PageTitle>Bell Compare Page</PageTitle>

@if (!uiDbExist)
{
    @if (localDbExist || fetchButtonClicked)
    {
        <LocalDbLoader message="Loading Data ...."></LocalDbLoader>
    }
 }
else
{
    

    <div class="container marketing">
        <TopFilters FilterChanged="(e)=>ApplyFilters(e)"></TopFilters>

        @if (WirelessSubLob == "Wireless")
        {
            <TableCompareCellphone BellSources="StateContainer.bellSourcesCellPhone" StaplesSources="StateContainer.staplesSourcesCellPhone" CompareBellStaple="StateContainer.compareBellStapleCellPhone"></TableCompareCellphone>
        }
        else
        {
            <TableCompareNonCellphone TitleSubLob=@WirelessSubLob BellSources="StateContainer.bellSourcesNonCellPhone" StaplesSources="StateContainer.staplesSourcesNonCellPhone" CompareBellStaple="StateContainer.compreBellStapleNonCellPhone"></TableCompareNonCellphone>

        }


    </div>
}


@code {

    string WirelessSubLob;
    bool localDbExist = true;
    bool uiDbExist = false;
    bool fetchButtonClicked = false;
    //bool showloader = false;
    protected override async Task OnInitializedAsync()
    {

        if (await CheckDbExist())
        {
            await LoadDatabaseInUi(StateContainer.filterItemDto);
        }

        StateHasChanged();
    }
    public async void ApplyFilters(FilterItemDto _filterItemDto)
    {
        StateContainer.filterItemDto = _filterItemDto;
        WirelessSubLob = StateContainer.filterItemDto.SubLob;
        LoadDatabaseInUi(StateContainer.filterItemDto);
    }

    public async Task<bool> CheckDbExist()
    {
        localDbExist = await _localdb.LocalDbExist();
        StateHasChanged();
        return localDbExist;
    }

    public void FetchButtonClickedChange(bool fetchButton)
    {
        fetchButtonClicked = fetchButton;
        StateHasChanged();
    }

    public async Task<bool> UiDbExist()
    {
        if (StateContainer.bellSourcesCellPhone.Count > 1)
        {
            uiDbExist = true;
            return true;
        }
        uiDbExist = false;
        return false;
    }

    public async Task LoadDatabaseInUi(FilterItemDto filterItemDto)
    {
        localDbExist = true;
        uiDbExist = false;
        StateContainer.bellSourcesCellPhone = await _localdb.GetBellSourceCellPhoneFromLocalDb(filterItemDto);
        StateContainer.staplesSourcesCellPhone = await _localdb.GetStapleSourceCellPhoneFromLocalDb(filterItemDto);
        StateContainer.compareBellStapleCellPhone = await _localdb.GetBellStapleCompareCellPhoneFromLocalDb(filterItemDto);

        StateContainer.bellSourcesNonCellPhone = await _localdb.GetBellSourceNonCellPhoneFromLocalDb(filterItemDto);
        StateContainer.staplesSourcesNonCellPhone = await _localdb.GetStapleSourceNonCellPhoneFromLocalDb(filterItemDto);
        StateContainer.compreBellStapleNonCellPhone = await _localdb.GetBellStapleCompareNonCellPhoneFromLocalDb(filterItemDto);

        uiDbExist = true;
        StateHasChanged();

    }

}