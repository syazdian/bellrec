@using Bell.Reconciliation.Frontend.Shared.ServiceInterfaces;

@inject IJSRuntime _jsRuntime;
@implements IAsyncDisposable
@inject ISyncData SyncData
@inject DialogService dialogService

@if (IsOnline)
{
    <img alt="Online" title="Application running online." src="./Assets/internet-on.png" /> 
    @if (ShowSyncChanges)
    {
        <RadzenButton Text="Sync Changes" Icon="sync" ButtonStyle="ButtonStyle.Success" Click="@OnClickSync"></RadzenButton>
    }
}
else
{
    <img alt="Offline" title="Application running offline." src="./Assets/internet-off.png" /><span>you are offline!</span>
}

@code {
    //[Parameter]
    //public RenderFragment ShowOnline { get; set; }

    //[Parameter]
    //public RenderFragment ShowOffline { get; set; }

    [CascadingParameter]
    public bool ShowSyncChanges { get; set; } = true;

    public bool IsOnline { get; set; }

    [JSInvokable("ConnectivityChanged")]
    public void OnConnectivityChanged(bool isOnline)
    {
        if (IsOnline != isOnline)
        {
            IsOnline = isOnline;
        }

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await _jsRuntime.InvokeVoidAsync("connectivity.initialize", DotNetObjectReference.Create(this));
    }

    public async ValueTask DisposeAsync()
    {
        await _jsRuntime.InvokeVoidAsync("connectivity.`dispose`");
    }


   

    private async Task OnClickSync()
    {
        ShowSyncChanges = false;
      await SyncData.UpdateChangesToServerDb();
       await ShowDialogWithCustomCssClasses();
        ShowSyncChanges = true;
    }
    async Task ShowDialogWithCustomCssClasses()
    {
        await dialogService.OpenAsync("Sync Data", ds =>
        @<div>
           Sync with Server is done!.
        </div>);
    }

}