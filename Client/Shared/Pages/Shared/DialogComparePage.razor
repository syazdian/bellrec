@inject IFetchData FetchData
@using System.Text.Json.Nodes;
@using System.Text.Json;
@using Texnomic.Blazor.JsonViewer

<JsonViewer @ref="JsonViewerInstance"></JsonViewer>
<div>
    @jsonString
</div>

<pre>
    @(JsonSerializer.Serialize(jsonString, new JsonSerializerOptions() { WriteIndented = true }))
</pre>

@*<table class="table table-bordered table-striped table-hover table-sm">
    <thead>
        <tr>
            <th>Name</th>
            <th>price</th>
            <th>date</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
            <tr>
                <td>
                @(
                    randomstring(8)
                )
                </td>
                <td>
                @(
                    getrandomDecimal()
                )
                </td>
                <td>
                @(
                    getrandomDatetime()
                )
                </td>
                <td>
                @(
                    randomstring(15)
                )
                </td>
            </tr>
    </tbody>
</table>
*@

@code {
    [Parameter]
    public string OrderNumber { get; set; } = "222";

    public string jsonString { get; set; }

    protected JsonViewer JsonViewerInstance { get; set; }

    protected async ValueTask JsonView()
    {
        try
        {
            //JsonArray jarray = JsonContent.Create(jsonString);
          
            StateHasChanged();

        }
        catch (Exception ex)
        {

            throw;
        }   
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
           // jsonString = await FetchData.GetDetailByOrderNumber("22");

           jsonString = "{\"RebateType\": [ \"Commission\", \"Downpayment\", \"Tax Rebate\" ]}";
            //JsonView();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            
            throw;
        }
       

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsonViewerInstance.Render(jsonString);
        //await JsonViewerInstance.Render(JsonConvert.SerializeObject(@User.Value));
        await base.OnAfterRenderAsync(firstRender);
    }


    //private string randomstring(int legnth)
    //{
    //    return Convert.ToBase64String(Guid.NewGuid().ToByteArray()).Substring(0, legnth);
    //}

    //private decimal getrandomDecimal()
    //{
    //    return (decimal)(new Random()).Next(-100, 1000);
    //}

    //private string getrandomDatetime()
    //{
    //    return DateTime.Now.AddDays((new Random()).Next(-1000, 0)).ToShortDateString();
    //}
}
