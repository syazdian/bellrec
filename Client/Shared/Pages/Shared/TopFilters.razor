@using Bell.Reconciliation.Common.Models.Domain;
@using Bell.Reconciliation.Frontend.Shared.ServiceInterfaces;
@using Radzen;
@inject IFilterService filterService

<div class="row featurette">
    <div class="col-md-7">
        <h2 class="featurette-heading">FILTERS</h2>
    </div>
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem" Class="rz-p-4 rz-mb-6 rz-border-radius-1" Style="border: var(--rz-grid-cell-border);">
        <RadzenFormField Text="LOB" Variant=@variantStyle Style="flex: 1;">
            <RadzenDropDown Data=@loBs @bind-Value="@lobValue" Change="@SetSubLob" AllowClear=true />
            <RadzenDropDown Data=@subLOBs @bind-Value="@subLobValue" AllowClear=true />
        </RadzenFormField>

        <RadzenFormField Text="Rebate Type" Variant=@variantStyle Style="flex: 1;">
            <RadzenDropDown Data=@rebateType @bind-Value="@rebateValue" AllowClear=true  />
        </RadzenFormField>
        <RadzenFormField Text="Brand" Variant=@variantStyle Style="flex: 1;">
            <RadzenDropDown Data=@brands @bind-Value="@brandValue" AllowClear=true />
        </RadzenFormField>
        <RadzenFormField Text="Location" Variant=@variantStyle Style="flex: 1;">
            <RadzenDropDown Data=@locations @bind-Value="@locationValue" AllowClear=true />
        </RadzenFormField>
    </RadzenStack>

    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem" Class="rz-p-4 rz-mb-6 rz-border-radius-1" Style="border: var(--rz-grid-cell-border);">
       
           
        <RadzenLabel Text="Transaction Date" />
        <RadzenDatePicker @bind-Value=@StartDate ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" />
        to
        <RadzenDatePicker @bind-Value=@EndDate ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" />
    </RadzenStack>
  
    <div class="rz-text-align-right">
        <RadzenButton Click=@(ResetFilter) Text="Reset Filter" ButtonStyle="ButtonStyle.Warning" />
        <RadzenButton Click=@(ApplyFilter) Text="Apply Filter" ButtonStyle="ButtonStyle.Primary" />
    </div>
</div>
<hr class="featurette-divider">

@code {
    Variant variantStyle = Variant.Flat;
    DateTime? StartDate ;//= DateTime.Now.AddMonths(-1);
    DateTime? EndDate ;//= DateTime.Now;

    FilterItemDto filterItemDto = new();
    string lobValue  ;
    List<string> loBs = new();
    string subLobValue ;
    List<string> subLOBs = new();
    string brandValue ;
    List<string> brands = new();
    string rebateValue = string.Empty;
    List<string> rebateType = new();
    string locationValue = string.Empty;
    List<string> locations = new();

    FilterItems filterItems = new();

    [Parameter]
    public EventCallback<FilterItemDto> FilterChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        filterItems =  await filterService.GetFilterItems();
        loBs = filterItems.LoBs.Select(x => x.Name).ToList();
        brands = filterItems.Brands;
        rebateType = filterItems.RebateTypes;
        locations = filterItems.Locations;

        ApplyFilter();
        StateHasChanged();
    }

    protected void SetSubLob()
    {
        subLobValue = string.Empty;
        subLOBs = filterItems.LoBs.Where(x => x.Name == lobValue).Select(y => y.SubLoBs).FirstOrDefault();
        StateHasChanged();
    }

    protected async void ApplyFilter()
    {
        filterItemDto.Lob = lobValue;
        filterItemDto.SubLob = subLobValue;
        filterItemDto.RebateValue = rebateValue;
        filterItemDto.Brand = brandValue;
        filterItemDto.Location = locationValue;
        filterItemDto.TransactionDateFrom = StartDate;
        filterItemDto.TransactionDateTo = EndDate;

        await FilterChanged.InvokeAsync(filterItemDto);

    }

    protected void ResetFilter()
    {
        lobValue = subLobValue = brandValue = rebateValue = locationValue = string.Empty;

    }

}
